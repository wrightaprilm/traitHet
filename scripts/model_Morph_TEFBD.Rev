###########################################
# Binary morphological substitution model #
###########################################
states = v( 2, 3, 4, 5, 6, 7, 8, 9)
n_max_states <- states.size()
clock_morpho ~ dnExponential(1.0)

moves.append(mvScale(clock_morpho, lambda=0.01, weight=4.0))
moves.append(mvScale(clock_morpho, lambda=0.1,  weight=4.0))
moves.append(mvScale(clock_morpho, lambda=1,    weight=4.0))


idx = 1
morpho_bystate <- morpho.setNumStatesVector()
for (i in 1:n_max_states) {
    nc = morpho_bystate[i].nchar()
    # for non-empty character blocks
    if (nc > 0) {
    alpha_morpho ~ dnUniform( 0, 1E6 )
    rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )
    #Moves on the parameters to the Gamma distribution.
    moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))
        # make i-by-i rate matrix
        q[idx] <- fnJC(i)
# create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                    Q=q[idx],
                                    nSites=nc,
                                    siteRates=rates_morpho,
                                    branchRates=clock_morpho,
                                    type="Standard")

        # attach the data
	    m_morph[idx].clamp(morpho_bystate[i])

        # increment counter
        idx = idx + 1
idx
}
}
