##########################################################################################
# Joint Fossilized Birth-Death Process prior on the topology and fossil occurrence times #
##########################################################################################
timeline <- v(5, 30, 60)

alpha <- 10
rho <- .0461
mu ~ dnExp(alpha)
lambda ~ dnExp(alpha)

origin_time ~ dnUnif(60, 100)


# Specify a sliding-window move on the origin_time parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing #

moves.append(mvSlide(origin_time, delta=0.01, weight=5.0))
moves.append(mvSlide(origin_time, delta=0.1,  weight=5.0))
moves.append(mvSlide(origin_time, delta=1,    weight=5.0))


moves.append(mvScale(mu, lambda = 0.01))
moves.append(mvScale(mu, lambda = 0.1))
moves.append(mvScale(mu, lambda = 1))

moves.append(mvScale(lambda, lambda = 0.01))
moves.append(mvScale(lambda, lambda = 0.1))
moves.append(mvScale(lambda, lambda = 1))


diversification := lambda - mu
turnover := mu / lambda
#sigma2 ~ dnLoguniform(1, 1)

#sigma2

    psi ~ dnExp(alpha)


    moves.append(mvScale(psi, lambda = 0.01))
    moves.append(mvScale(psi, lambda = 0.1))
    moves.append(mvScale(psi, lambda = 1))
#    moves.append( mvScale(sigma2, weight=1.0))



fbd_dist= dnSSBDP(originAge=origin_time,lambda=lambda, timeline=timeline, mu=mu, phi=psi, r=rho, taxa=taxa)
    OG = clade("Purgatorius_unio")
    constraints = v(OG)
    fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints)

    init_tree = readTrees("data/initial.tre")[1]


    moves.append( mvFNPR(fbd_tree, weight=15.0) )
    moves.append( mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0) )

    moves.append( mvNodeTimeSlideUniform(fbd_tree, weight=40.0) )
    moves.append( mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )

#    fbd_tree.setValue(init_tree)


    # Specify mclade(taxon))
    intervals = readDataDelimitedFile(file="data/PrimateAges.tsv", header=true)

    for(i in 1:intervals.size())
    {
     taxon  = intervals[i][1]
     a_i = intervals[i][2]
     b_i = intervals[i][3]
     a_i
     t[i] := tmrca(fbd_tree, clade(taxon))

     fossil[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
    }
    # Add a move to sample the fossil times #
    moves.append(mvTipTimeSlideUniform(fbd_tree, origin_time, weight=5.0))
    moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=5.0))
#    X ~ dnPhyloBrownianREML(fbd_tree, branchRates=sigma2^0.5)
    ### Create deterministic nodes to monitor various tree statistics ###
    # Monitor the number of sampled ancestors in the FBD-tree #
    num_samp_anc := fbd_tree.numSampledAncestors();

    #age_extant := tmrca(fbd_tree, small)
#X.clamp(trait)

# Specify moves on the tree and node times #
# These moves update the tree topology
moves.append(mvFNPR(fbd_tree, weight=15.0))
moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0))

# These moves update the node ages #
# Because we are conditioning on the origin time, we must also sample the root node age #
moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40.0))
moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0))
